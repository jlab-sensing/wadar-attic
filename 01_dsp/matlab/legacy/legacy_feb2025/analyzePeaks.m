% Shows plots of vwc manual, true, and predicted for each experiment 
% Assumes there is a file named peakResults.xlsx, generated by salsaPeaks

% Ex. Usage: analyzePeaks('/home/bradley/Documents/Research/peak_detect/')

function analyzePeaks(localPath) 

% TODO: don't hard code maxTemplates
maxTemplates = 2; % max number of templates used in any experiment 

% ------------------------------------------ READ THE XLSX -----------------------------------------
T = readtable(fullfile(localPath,'peakResults.xlsx'));
expNames = table2array(T(:,'expNames')); 
expNamesUnique = unique(expNames); 

% ----------------------------------------- PLOT THE RESULTS----------------------------------------
% creates one plot per experiment 

figure('Position',[10 10 900 600]); 
for exp_ind = 1:length(expNamesUnique)
    if length(char(expNamesUnique(exp_ind))) == 0
        continue
    end
    subplot(2,3,exp_ind-1);
    legendLabels = []; 
    
    % find the automatically calculated VWCs for each template 
    for template_ind = 1:maxTemplates
        cans = []; 
        vwc = []; 
        
        for capture_ind = 1:height(T)
            % get can and vwc if experiment matches current experiment name
            if ~(length(char(T.('expNames')(capture_ind))) == 0) && ...
                    (strcmp(char(T.('expNames')(capture_ind)), char(expNamesUnique(exp_ind))))
                
                captureName = char(T.('captureNames')(capture_ind)); 
                
                cans = [cans str2num(captureName(strfind(captureName, 'can')-1))]; 
                vwc = [vwc T.(strcat('vwcPreds_',num2str(template_ind)))(capture_ind)]; 
            end
        end
        
        % calculate vwc mean and standard deviation for each can 
        uniqueCans = unique(cans);
        x = []; 
        y = [];  
        err = []; 
        for i = 1:length(uniqueCans)
            x = [x uniqueCans(i)]; 
            y = [y mean(vwc(cans==uniqueCans(i)))];  
            err = [err std(vwc(cans==uniqueCans(i)))]; 
        end
        
        % plot 
        errorbar(x, y, err, 'DisplayName', strcat('template',num2str(template_ind))); hold on; 
    end
    
    % find the manually calculated and true VWCs 
    cans = []; 
    vwcManual = []; 
    vwcTrue = []; 
    for capture_ind = 1:height(T)
        % get can and vwc if experiment matches current experiment name
        if ~(length(char(T.('expNames')(capture_ind))) == 0) && ...
                (strcmp(char(T.('expNames')(capture_ind)), char(expNamesUnique(exp_ind))))
            
            captureName = char(T.('captureNames')(capture_ind)); 

            cans = [cans str2num(captureName(strfind(captureName, 'can')-1))]; 
            vwcManual = [vwcManual T.('vwcManual')(capture_ind)];
            vwcTrue = [vwcTrue T.('vwcTrue')(capture_ind)]; 
        end
    end
    
    % calculate vwc mean and standard deviation for each can
    x = []; 
    y = []; 
    y2 = []; 
    err = []; 
    for i = 1:length(uniqueCans)
        x = [x uniqueCans(i)]; 
        y = [y mean(vwcManual(cans==uniqueCans(i)))]; 
        y2 = [y2 mean(vwcTrue(cans==uniqueCans(i)))]; % (all values equal)
        err = [err std(vwcManual(cans==uniqueCans(i)))]; 
    end
    
    % plot 
    errorbar(x, y, err, 'DisplayName', 'manual'); hold on; 
    plot(x, y2, '-o', 'DisplayName', 'true'); 
    
    % finish plotting 
    title(expNamesUnique(exp_ind), 'Interpreter', 'none'); 
    xlabel('cans'); 
    xlim([-1 5])
    ylim([-0.15 0.5])
    ylabel('vwc'); 
    grid on;
    legend('Location','northwest');      
end

end